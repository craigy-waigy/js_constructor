{"version":3,"sources":["utils.js","classes/blocks.js","model.js","classes/site.js","classes/sidebar.js","classes/app.js","index.js"],"names":["row","content","styles","col","css","Object","keys","map","key","join","block","type","Block","value","options","Error","TitleBlock","tag","ImageBlock","is","imageStyles","alt","ColumnsBlock","html","TextBlock","model","background","color","padding","image","display","width","height","Site","selector","$el","document","querySelector","innerHTML","forEach","insertAdjacentHTML","toHTML","Sidebar","updateCallback","update","init","template","addEventListener","add","bind","event","preventDefault","target","name","newBlock","App","site","render","push"],"mappings":"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","file":"src.1844b07e.js","sourceRoot":"../src","sourcesContent":["export function row(content, styles = '') {\n    return `<div class=\"row\" style=\"${styles}\">${content}</div>`\n}\n\nexport function col(content) {\n    return `<div class=\"col-sm\">${content}</div>`\n}\n\nexport function css(styles = {}) {\n    if (typeof styles === 'string') return styles\n    const toString = key => `${key}: ${styles[key]}`\n    return Object.keys(styles).map(toString).join(';')\n}\n\nexport function block(type) {\n    return `\n    <form name=\"${type}\">\n      <h5>${type}</h5>\n      <div class=\"form-group\">\n        <input class=\"form-control form-control-sm\" name=\"value\" placeholder=\"value\">\n      </div>\n      <div class=\"form-group\">\n        <input class=\"form-control form-control-sm\" name=\"styles\" placeholder=\"styles\">\n      </div>\n      <button type=\"submit\" class=\"btn btn-primary btn-sm\">Добавить</button>\n    </form>\n    <hr />\n  `\n}","import {col, css, row} from \"../utils\";\n\nexport class Block {\n    constructor(value, options) {\n        this.value = value\n        this.options = options\n    }\n\n    toHTML() {\n        throw new Error('Метод toHTML должен быть реализован')\n    }\n}\n\nexport class TitleBlock extends Block {\n    constructor(value, options) {\n        super(value, options);\n    }\n\n    toHTML() {\n        const {tag = 'h1', styles} = this.options\n        return row(col(`<${tag}>${this.value}</${tag}>`), css(styles))\n    }\n}\n\nexport class ImageBlock extends Block {\n    constructor(value, options) {\n        super(value, options);\n    }\n\n    toHTML() {\n        const {imageStyles: is, alt = '', styles} = this.options\n        return row(`<img src=\"${this.value}\" alt=\"${alt}\" style=\"${css(is)}\">`, css(styles))\n    }\n}\n\nexport class ColumnsBlock extends Block {\n    constructor(value, options) {\n        super(value, options);\n    }\n\n    toHTML() {\n        const html = this.value.map(col).join('')\n        return row(html, css(this.options.styles))\n    }\n}\n\nexport class TextBlock extends Block {\n    constructor(value, options) {\n        super(value, options);\n    }\n\n    toHTML() {\n        return row(col(`<p>${this.value}</p>`), css(this.options.styles))\n    }\n}","import image from './assets/image.png'\nimport {TextBlock, TitleBlock, ColumnsBlock, ImageBlock} from './classes/blocks'\n\nexport const model = [\n    new TitleBlock('Конструктор сайтов на JS', {\n        tag: 'h2',\n        styles: {\n            background: 'linear-gradient(to right, #ff0099, #493240)',\n            color: '#fff',\n            padding: '1.5rem',\n            'text-align': 'center'\n        }\n    }),\n    new TextBlock('here we go with some text', {}),\n    new ColumnsBlock([\n        '111111111',\n        '222222222',\n        '222222222',\n        '222222222',\n        '333333333'\n    ], {}),\n    new ImageBlock(image, {\n        styles: {\n            padding: '2rem 0',\n            display: 'flex',\n            'justify-content': 'center'\n        },\n        imageStyles: {\n            width: '500px',\n            height: 'auto'\n        },\n        alt: 'Это картинка'\n    }),\n]","export class Site {\n    constructor(selector) {\n        this.$el = document.querySelector(selector)\n    }\n\n    render(model) {\n    this.$el.innerHTML = ''\n    model.forEach(block => {\n        this.$el.insertAdjacentHTML('beforeend', block.toHTML())\n        })\n    }\n}","import {block} from \"../utils\";\nimport {TitleBlock, TextBlock, ImageBlock, ColumnsBlock} from \"./blocks\";\n\nexport class Sidebar {\n    constructor(selector, updateCallback) {\n        this.$el = document.querySelector(selector)\n        this.update = updateCallback\n\n        this.init()\n    }\n\n    init() {\n        this.$el.insertAdjacentHTML('afterbegin', this.template)\n        this.$el.addEventListener('submit', this.add.bind(this))\n    }\n\n    get template() {\n        return [\n            block('text'),\n            block('title')\n        ].join('')\n    }\n\n    add(event) {\n        event.preventDefault()\n\n        const type = event.target.name\n        const value = event.target.value.value\n        const styles = event.target.styles.value\n\n        const newBlock = type === 'text'\n            ? new TextBlock(value, {styles})\n            : new TitleBlock(value, {styles})\n\n        this.update(newBlock)\n\n        event.target.value.value = ''\n        event.target.styles.value = ''\n    }\n}","import {Site} from \"./site\";\nimport {Sidebar} from \"./sidebar\";\n\nexport class App {\n    constructor(model) {\n        this.model = model\n    }\n\n    init() {\n        const site = new Site('#site')\n\n        site.render(this.model)\n\n        const updateCallback = newBlock => {\n            this.model.push(newBlock)\n            site.render(this.model)\n        }\n\n        new Sidebar('#panel', updateCallback)\n    }\n}","import {model} from './model'\nimport {App} from \"./classes/app\";\nimport './styles/main.css'\n\nnew App(model).init()"]}